name: 'Terraform AWS CI/CD Pipeline'

on:
  push:
    branches: [ "dev" ]
  pull_request:
permissions:
      id-token: write
      contents: write
      pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: 'Terraform CI/CD'
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./TF

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Connects with AWS using the OIDC role
    - name: Configure AWS credentials from AWS account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: Github-OIDC-Terraform

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.8

    # Initializing the TF modules
    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ SECRETS.AWS_BUCKET_NAME }} 
        AWS_BUCKET_KEY_NAME: ${{ SECRETS.AWS_BUCKET_KEY_NAME }} 
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}"

    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # Applies the Plan generated in above step
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"dev"' #&& github.event_name == 'push'
      run: terraform apply -auto-approve -input=false